{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the TTNRT Docs","text":"<p>Please find your section or service on the sidebar to see what you are looking for.</p>"},{"location":"Examples/example-page/","title":"Example page","text":"<p>Normal Paragrpah</p> <p>Side text</p> <p>Bold and brash</p> <p>~~Crossed out~~</p> <p><code>Inline code</code></p> <p>Just a normal quote</p> <p> Checked</p> <p> Not checked</p> <ul> <li>A computer</li> <li>A phone</li> <li> <p>A brain</p> </li> <li> <p>Start with writing</p> </li> <li>Then use markdown</li> <li>Finally, commit the file</li> </ul> <p>Example link</p> Column 1 Column 2 Column 3 Text Text Text <p>Note</p> <p>Example alert</p> <p>Warning</p> <p>Example alert</p> <p>Info</p> <p>Example alert</p> <p>Note</p> <p>Example alert</p> <p>Success</p> <p>Example alert</p> <p>Danger</p> <p>Example alert</p>"},{"location":"Rundown/contribute/","title":"Contribute","text":"<p>Please refer to our terms of use on doing pull requests.</p>"},{"location":"Rundown/syntex-layout/","title":"Syntex layout","text":"<p>A quick walkthrough on our page making</p>"},{"location":"Rundown/syntex-layout/#headers","title":"Headers","text":"<p>Headers use the <code>#</code> for doing that for markdown.</p> <p>Examples:</p> <pre><code># Header 1\n## Header 2\n### Header 3\n</code></pre>"},{"location":"Rundown/syntex-layout/#paragraph","title":"Paragraph","text":"<p>Paragraphs don't use the <code>&lt;p&gt;</code> tag. In fact, they are considered texts from that.</p>"},{"location":"Rundown/syntex-layout/#code-block","title":"Code Block","text":"<p>We sometimes use the code blocks for source code or examples.</p> <p>Example:</p> <p><code>Code line</code></p> <pre><code>Code block\n</code></pre>"},{"location":"Rundown/syntex-layout/#quotes","title":"Quotes","text":"<p>Doing quotes is sometimes needed for SRC on image files or general text credits</p>"},{"location":"Rundown/syntex-layout/#numbering","title":"Numbering","text":"<p>Numbering down sections or listing them is a needed step if doing a tutorial page. Because the bullet points are sometimes needed, they are the same thing, but for different reasons (see below).</p>"},{"location":"Rundown/syntex-layout/#points","title":"Points","text":"<p>Bullet points usually don't mean anything, but they can infer required things such as cords, devices, and mass storage devices. We may also this for other purposes soon.</p>"},{"location":"Rundown/syntex-layout/#tables","title":"Tables","text":"<p>Tables are a good idea for sorting and comparing. For a page, it uses the same method for doing the title and layout options. This is hidden, but this example is always visible to the public.</p> <pre><code>| Column 1 | Column 2 | Column 3 |\n| -------- | -------- | -------- |\n| Text     | Text     | Text     |\n</code></pre>"},{"location":"Rundown/syntex-layout/#links","title":"Links","text":"<p>Links are used for citations (mainly for wikis) to source that section directly. In fact, wikis use that, but we sometimes put references to the table.</p>"},{"location":"Rundown/syntex-layout/#other","title":"Other","text":"<p>Other styles for paragraphs are not needed, but they can help the reader on what the page is talking about.</p>"},{"location":"Rundown/syntex-layout/#bolded","title":"Bolded","text":"<p>Bolded text means that it is an important part you should remember.</p>"},{"location":"Rundown/syntex-layout/#italic","title":"Italic","text":"<p>This type is most likely used for definitions and underlines.</p>"},{"location":"Rundown/syntex-layout/#underlines","title":"Underlines","text":"<p>We can do underlines as well in markdown. There is no symbol for that, so we use the <code>&lt;u&gt;</code> tag for that. This section will refer to the bolded part of this page.</p>"},{"location":"Rundown/syntex-layout/#strikethrough","title":"Strikethrough","text":"<p>This one is mainly needed only for the deletion of text that is either misspelled or just not typed out correctly. This is useful for wikis as well.</p>"},{"location":"Rundown/syntex-layout/#alerts","title":"Alerts","text":"<p>Alerts are used as a reminder or warning (depending on the section) and is using both Bootstrap and their icons. However, some pages use this as a template and do not use any html inside of the file.</p>"},{"location":"Rundown/syntex-layout/#summery","title":"Summery","text":"<p>In general, the syntax is somewhat complex, and it really is for doing these. These help us save time with writing HTML or other. You can find out the rest we might use on the example page.</p>"},{"location":"TTGit/","title":"Intro","text":"<p>This documentation section will cover on our TTGit service, along with our services we host for it. For more support on this service or would like help on it, go to the forums and submit an issue on the problem you are having.</p>"},{"location":"TTGit/#what-it-is","title":"What it is","text":"<p>TTGit is a Devopps platform, made in a Go based program called forgejo, while is covered by Gitea on the inside. When you are using, it's basicly like GitHub, but more user-friendly. It mostly has the same features like most other Git source providers, but also offers extra services for it.</p>"},{"location":"TTGit/#how-it-works","title":"How it works","text":"<p>It works almost the same way, like when you want to host your source code on platforms like this one. Your data is protected by Cloudflare in the background, while your source code or other data is stored in the cloud.</p>"},{"location":"TTGit/#sources","title":"Sources","text":"<ul> <li>Gitea</li> <li>Forgejo</li> </ul>"},{"location":"TTGit/Actions/","title":"Using the built-in Actions","text":"<p>This section will tell you on how to use the built-in TTGit actions feature, which is free to use, and comes with no cost.</p> <p>Actions is a continuous integration and continuous delivery (CI/CD) feature that allows you to automate your build, test and deployment pipelines in Forgejo, the software TTGit uses. It is compatible with GitHub Actions.</p> <p>Due to outstanding security issues and bus factor (we need more maintainers for our CI service to get it running), we are currently not yet providing hosted Actions. If you need TTGit to host your CI, please use Woodpecker CI instead.</p> <p>But you can already connect your own Runner to TTGit. CI jobs will run on your machine, and the result will be displayed in TTGit.</p> <p>This guide will walk you through setting up your own Forgejo Actions Runner to use for CI jobs.</p>"},{"location":"TTGit/Actions/#obtaining-a-token","title":"Obtaining a token","text":"<p>Make sure to enable actions</p> <p>Repository Actions are disabled by default and will require you to enable them in the \"Advanced Settings\" section of the settings page.</p> <p>Before deploying the Runner, you need to obtain a registration token from TTGit. Registration tokens are used by the Runner and TTGit to share secrets and configurations.</p> <p>You can add Runners to your account, organization, or repository. Choosing where you obtain the registration token will determine where your Runner will accept workflows from.</p> <ol> <li> <p>Go to the account/organization/repository settings page.</p> </li> <li> <p>Click on Actions.</p> </li> <li> <p>Click on Runners.</p> </li> <li> <p>Click on Create new Runner.</p> </li> <li> <p>Copy the registration token.</p> </li> </ol> <p></p>"},{"location":"TTGit/Actions/#installing-forgejo-runner","title":"Installing Forgejo Runner","text":"<p>Forgejo Runner is released in both binary and container image (OCI) forms:</p> <ul> <li> <p>Download the binary to run on your machine:</p> <pre><code>wget -O forgejo-runner https://code.forgejo.org/forgejo/runner/releases/download/v3.3.0/forgejo-runner-3.3.0-linux-amd64\nchmod +x forgejo-runner\n</code></pre> <p>Make sure to replace <code>amd64</code> with <code>arm64</code> if your host machine is on ARM.</p> </li> <li> <p>Or download the container image and run it using Docker:</p> <pre><code>docker run --rm code.forgejo.org/forgejo/runner:3.3.0 forgejo-runner --version\n</code></pre> </li> </ul>"},{"location":"TTGit/Actions/#registrating","title":"Registrating","text":"<p>The Forgejo runner needs to connect to a Forgejo instance and must be registered before doing so. It will give it permission to read the repositories and send back information to Forgejo such as the logs or its status. There is a few ways to register your runner for TTGit.</p>"},{"location":"TTGit/Actions/#using-the-binary","title":"Using the binary","text":"<p>A special kind of token is needed and can be obtained from the Create new runner button:</p> <ul> <li> <p>in /admin/actions/runners to accept workflows from all repositories.</p> </li> <li> <p>in /org/{org}/settings/actions/runners to accept workflows from all repositories within the organization.</p> </li> <li> <p>in /user/settings/actions/runners to accept workflows from all repositories of the logged in user</p> </li> <li> <p>in /{owner}/{repository}/settings/actions/runners to accept workflows from a single repository.</p> </li> </ul> <p>For instance, using a token obtained for a test repository from TTGit</p> <pre><code>forgejo-runner register --no-interactive --token {TOKEN} --name runner --instance https://gitea.ttnrtsite.me\n</code></pre>"},{"location":"TTGit/Actions/#running","title":"Running","text":"<p>Once the Forgejo runner is successfully registered, it can be run from the directory in which the .runner file is found with:</p> <pre><code>forgejo-runner daemon\n</code></pre> <p>To verify it is actually available for the targeted repository, go to /{owner}/{repository}/settings/actions/runners. It will show the runners:</p> <ul> <li>dedicated to the repository with the repo type</li> <li>available to all repositories within an organization or a user</li> <li>available to all repositories, with the Global type</li> </ul> <p></p>"},{"location":"TTGit/Actions/#testing-workflows","title":"Testing workflows","text":"<p>To test your CI runner setup, you can use the following demo workflow:</p> <pre><code>on: [push]\njobs:\n  test:\n    runs-on: docker\n    steps:\n      - run: echo All Good\n</code></pre> <p>The runner seeks action recipes from <code>.forgejo/workflows</code>, so make sure your file is in the required path.</p> <p></p>"},{"location":"TTGit/Actions/#sources","title":"Sources","text":"<ul> <li>Forgejo runner</li> <li>Gitea runner</li> </ul>"},{"location":"TTGit/CI/","title":"Using the CI","text":"<p>Our CI interface uses Woodpecker for actions on the platform. It is loaded and operated in Docker as a image, while it is interacting with the API on the website.</p>"},{"location":"TTGit/CI/#working-with-it","title":"Working with it","text":"<p>Every piece of code should be tested regularly. Ideally developers already implement unit-tests to test the functionality of code sections. Some projects even implement a suite of integration tests, testing whether the code in different parts of the software works as a whole and (still) provides the functionality the software promises to deliver. Running these tests regularly (or continuously) is the job of a Continuous Integration solution. The results of the tests are displayed to the project members and maintainers, enabling them to identify problems and react if errors occur.</p>"},{"location":"TTGit/CI/#using-it","title":"Using it","text":"<p>TTNRT currently provides an instance of Woodpecker CI to everyone who needs it. You need to request access, because we want to keep resource abuse minimal. Please check out our request procedure!</p> <p>For the usage of our Woodpecker instance, keep the following in mind:</p> <ul> <li>CI access is provided as-is and might break at any time and for an undefined period of time, due to server issues, for testing and maintenance purpose or human error. Our CI service is not of the highest priority right now.</li> <li>Resource usage must be reasonable for the intended use-case. This is determined on a case-by-case basis, but please be aware that CI uses a lot of computing resources (cloning your repo and container, installing all your required tools, building and throwing everything away) which costs us money and does damage to our precious environment. Therefore, please consider twice how to create a good balance between ensuring code quality for your project and resource usage therefore.</li> <li>The service is in an early phase, which means it might not yet be suited for large and complex projects. Please report all issues you face to us, so you can be a part of the improvement!</li> </ul> <p>If you are just curious about Woodpecker or already got access to a Woodpecker instance, the Woodpecker project has a great documentation on how to use Woodpecker in your repositories. For now, refer to the Gitea VCS integration section.</p>"},{"location":"TTGit/CI/#using-ttgit-actions","title":"Using TTGit actions","text":"<p>Forgejo, the software TTGit is built on, offers a CI/CD feature called Actions. It offers compatibility with GitHub Actions, with some differences. Further information such as how to run it is available in the Using Gitea actions page.</p>"}]}